<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 码上遇见你</title>
    <link>http://vipbbo.com/posts/</link>
    <description>Recent content in Posts on 码上遇见你</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Jan 2023 23:05:22 +0800</lastBuildDate><atom:link href="http://vipbbo.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helloworld</title>
      <link>http://vipbbo.com/2023/helloworld/</link>
      <pubDate>Fri, 13 Jan 2023 23:05:22 +0800</pubDate>
      
      <guid>http://vipbbo.com/2023/helloworld/</guid>
      <description>This is My First Blog adsfasdfs
Map </description>
    </item>
    
    <item>
      <title>Java-Map</title>
      <link>http://vipbbo.com/2023/javamap/</link>
      <pubDate>Fri, 13 Jan 2023 23:05:22 +0800</pubDate>
      
      <guid>http://vipbbo.com/2023/javamap/</guid>
      <description>Java Map解锁新姿势，相信绝大数人并不知晓；相信我，你懂的。
简单Map的操作 说到Java Map的操作，其实有很多种，但是归结起来无非就两种，其中一种便是简单Map的操作，
简单Map 简单Map指的是：value是个atomic value，比如：
Map&amp;lt;K, Integer&amp;gt;; Map&amp;lt;K, Character&amp;gt;; 上面的K是个generic type(也就是泛型)。
复杂的Map 所谓的复杂的Map指的就是，value不是一个atomic value，常见的一个情况就是value是一个collection，比如：
Map&amp;lt;K, Collection&amp;lt;V&amp;gt;&amp;gt; Map&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt; Map&amp;lt;K, Set&amp;lt;V&amp;gt;&amp;gt; 其实简单的Map操作起来还是比较方便的，这里不再一一举例。 但是通常情况下我们使用的Map更多情况下是一个复杂Map，如果像下面这样编写的一个代码，它就有可能抛出一个NullPointerException
Map&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.get(key).add(val); 上述代码之所以会出现空指针的异常，主要原因就是当map并不包含key时。（map.get(key).add(val)）也就等价于null.add(val) 在我们日常工作开发中通常采用的解决方案，代码如下：
Map&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); if (!map.containsKey(key)) { map.put(key, new ArrayList&amp;lt;&amp;gt;()); } map.get(key).add(val); 上述方案便可规避掉NullPointerException异常，但是代码看上去过于冗长。
重点来了！解锁复杂Map避免空指针异常的简化代码 Map&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.computerIfAbsent(key, k-&amp;gt; new ArrayList&amp;lt;&amp;gt;()); map.get(key).add(val); 代码是不是看上去简化清爽了许多。 关于computeIfAbsent的Java文档可以参考：computeIfAbsent
当然如此清爽代码的解决方案不止一种，比如还有Guava Multimap
使用Guava Multimap解锁新姿势(该方式代码更加简洁) Multimap&amp;lt;K, V&amp;gt; multimap = ArrayListMultimap.</description>
    </item>
    
  </channel>
</rss>
